pipeline {
    agent any
    
    environment {
        registryCredential='ecr:us-east-1:awscreds'
        // copy from ECR repository
        appRegistry='0909090909090.dkr.ecr.us-east-1.amazonaws.com/javainfoimg'
        projectRegistry='https://0909090909090.dkr.ecr.us-east-1.amazonaws.com'
        cluster='ecs cluster name'
        service='ecs service name'
    }

    stages {
        stage('Fetch code') {
            steps {
                // plugin utilization
                git branch: 'main', url: 'https://github.com/celeguim/jvminfo.git'
            }
        }
        stage('Test') {
            steps {
                // shell utilization
                sh 'mvn test'
            }
        }
        stage('Checkstyle') {
            steps {
                // shell utilization
                sh 'mvn checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Analysis result completed'
                }
            }
        }
        stage('SonarQube analysis') {
            environment {
                scannerHome = tool 'sonar4.7'
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                    -Dsonar.projectName=vprofile-repo \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=src/ \
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                    -Dsonar.junit.reportsPath=target/surefire-reports/ \
                    -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                    -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''                    
                }
            }
        }
        stage('Docker build') {
            steps {
                script {
                    // plugin need to be installed (docker pipeline)
                    // plugin install docker engine on jenkins
                    dockerImage = docker.build(appRegistry + ":$BUILD_NUMBER", "./Docker-files/app/multistage/")
                }
            }
        }
        stage('Upload image to AWS/ECR') {
            // plugin ECR to be installed
            steps {
                script {
                    docker.withRegistry(projectRegistry, registryCredential) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
        stage('Deploy to ECS') {
            steps {
                withAWS(credentials: 'awscreds', region: 'us-east-1') {
                    sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment'
                }
            }
        }
    }
}
